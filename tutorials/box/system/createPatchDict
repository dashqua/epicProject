/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  6
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      createPatchDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// This application/dictionary controls:
// - optional: create new patches from boundary faces (either given as
//   a set of patches or as a faceSet)
// - always: order faces on coupled patches such that they are opposite. This
//   is done for all coupled faces, not just for any patches created.
// - optional: synchronise points on coupled patches.
// - always: remove zero-sized (non-coupled) patches (that were not added)

// 1. Create wall:
// - specify where the faces should come from
// - specify the type of wall. If a rotational specify the rotationAxis
//   and centre to make matching easier
// - always create both halves in one invocation with correct 'neighbourPatch'
//   setting.
// - optionally pointSync true to guarantee points to line up.

// 2. Correct incorrect wall:
// This will usually fail upon loading:
//  "face 0 area does not match neighbour 2 by 0.0100005%"
//  " -- possible face ordering problem."
// - in polyMesh/boundary file:
//      - loosen matchTolerance of all walls to get case to load
//      - or change patch type from 'wall' to 'patch'
//        and regenerate wall as above

// Do a synchronisation of coupled points after creation of any patches.
// Note: this does not work with points that are on multiple coupled patches
//       with transformations (i.e. walls).
pointSync false;

// Optional: Write wall matches into .obj format; defaults to false.
// writewallMatch  false;

// Patches to create.
patches
(
 {
   name emptyPatches_empt;
   patchInfo { type zeroGradient; }
   constructFrom patches;
   patches (sides);
 }
 {
   name top_cyc;
   patchInfo
   {
        type            cyclicAMI;
        neighbourPatch  bottom_cyc;
	matchTolerance  1e-3;
        transform       translational;
	separationVector (0. -15 0.);
   }
   constructFrom patches;
   patches (top);
 }
 {
   name bottom_cyc;
   patchInfo
   {
        type            cyclicAMI;
        neighbourPatch  top_cyc;
	matchTolerance  1e-3;
        transform       translational;
	separationVector (0. 15 0.);
   }
   constructFrom patches;
   patches (bottom);
 }
 {
   name inlet_cyc;
   patchInfo
   {
        type            cyclicAMI;
        neighbourPatch  outlet_cyc;
	matchTolerance  1e-3;
        transform       translational;
	separationVector (20 .0 .0);
   }
   constructFrom patches;
   patches (inlet);
 }
 {
   name outlet_cyc;
   patchInfo
   {
        type            cyclicAMI;
        neighbourPatch  inlet_cyc;
	matchTolerance  1e-3;
        transform       translational;
	separationVector (-20 .0 .0);
   }
   constructFrom patches;
   patches (outlet);
 }
);

// ************************************************************************* //
